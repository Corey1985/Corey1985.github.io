////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//return a range of numbers in an array
//include an optional 3rd element that is an alternate incrementer
function range(minNum, maxNum, skipInc) {
  let rangeSum = [];
   if (minNum === maxNum || skipInc === -1){
       rangeSum;
   }
   else{ 
    if (skipInc == null){
          skipInc = 1;
    } 
      for(let i = minNum; i <= maxNum; i += skipInc){
        if(skipInc > 0){
            rangeSum.push(i); 
        } 
      else{
          for(let i = minNum; i >= maxNum; i--){
            rangeSum.push(i);
          }
        }
      }
    }
   return rangeSum; 
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//return the sum of an array

function sum(array) {
  let total = 0;
  for(let i = 0; i < array.length;i++){
    total += array[i];
  }
  return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//reverse an array
//will need a new array that the original variables will be placed into
//return new array
function reverseArray(array) {
  let revArr = [];
    for(let i = array.length -1; i >= 0; i--){
      revArr.push(array[i]);
    }
    return revArr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//reverse the given array 
//must be the same array in reverse
function reverseArrayInPlace(array){
  return array.reverse();
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//convert array to an object
//use the index of the array as the key for the value of the indexed value
function arrayToList(array){
     let newList = null;
  for (var i = array.length - 1; i >= 0; i--)
    newList = {value: array[i], 
               rest: newList
              };
  return newList;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//loop through an object and add its values to a new array
//use a for in loop
//return the new array
//the list has a nested object

function listToArray(list) {
  // return Object.values(list);
  let newArr = [];
   for (list; list; list = list.rest){ 
    newArr.push(list.value);
  
  }
  return newArr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//insert a value into a list BEFORE other elements in the list
function prepend(value, objList) {
  return {value: value, rest: objList};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//if number does not exist in the given position in the list return undefined
//return the position of the given number in the list

function nth(list, numberPosition) {
  if(!list){
    return undefined;
  }
  else if (numberPosition === 0) {
    return list.value;
  }
  else{
    return nth(list.rest, numberPosition -= 1);
    }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//should compare if two objects are the same 
//should compare if two numbers are equal
//compare if 2 falsey values are the same
//return a boolean value
function deepEqual(object1, object2) {
  if (object1 === object2) {
    return true;
  }
  else if ((typeof object1 === "object" && object1 !== null) && (typeof object2 === "object" && object2 !== null)) {
    if (Object.keys(object1).length !== Object.keys(object2).length)
      return false;
    for (var property in object1) {
      if (object2.hasOwnProperty(property))
      {  
        if (!deepEqual(object1[property], object2[property]))
          return false;
      }
      else
        return false;
    }

    return true;
  }
  else 
    return false;
}


////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
